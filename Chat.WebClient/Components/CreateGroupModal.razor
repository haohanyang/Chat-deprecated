@using Chat.WebClient.Services;
@using Chat.Common.DTOs;
@inject IHttpService HttpService;

<div class="modal fade" id="modal-create-group">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Create group</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        <label for="create-group-input">Group name</label>
                        <input type="text" class="form-control" id="create-group-input" placeholder="A gaming group?"
                        @bind-value="@_input">
                        <small class="form-text text-muted">
                            Group name should be 4-20 characters long.
                        </small>
                    </div>
                </form>
                @if (_errorMessage != null)
                {
                    <div class="alert alert-danger" role="alert">
                        @_errorMessage
                    </div>
                }
                @if (isSuccessful)
                {
                    <div class="alert alert-success" role="alert">
                        Group created successfully!
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary " disabled="@isRequesting"
                @onclick="@CreateGroup">Create</button>
            </div>

        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    public UserDto CurrentUser { get; set; } = new();

    [Parameter]
    public EventCallback<(int, GroupDto)> AddGroupContactCallback { get; set; }

    [Parameter]
    public EventCallback<int> SetGroupContactCallback { get; set; }
    private string _input = string.Empty;
    private bool isRequesting = false;
    private bool isSuccessful = false;
    private string? _errorMessage = null;

    private async Task CreateGroup()
    {
        isRequesting = true;
        _errorMessage = null;
        isSuccessful = false;

        try
        {
            var group = await HttpService.CreateGroup(CurrentUser.Username, _input);
            isSuccessful = true;
            // Add group to the list of groups
            await AddGroupContactCallback.InvokeAsync((group.Id, group));
            // Set the current contact to the newly created group
            await SetGroupContactCallback.InvokeAsync(group.Id);
            _input = string.Empty;
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
        finally
        {
            isRequesting = false;
        }
    }
}