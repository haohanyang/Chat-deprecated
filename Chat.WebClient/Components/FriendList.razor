@using Chat.Common.DTOs;
@using Chat.WebClient.Services;
@using Chat.Common.Dtos
@inject IHttpService HttpService;

<li class="nav-item">
    <a href="#" class="nav-link">
        <i class="nav-icon bi bi-person-fill nav-icon"></i>
        @if (_isLoading || _errorMessage != null)
        {
            <p>
                Friends
                <i class="right bi bi-caret-left-fill"></i>
            </p>
        }
        else
        {
            <p>
                Friends(@(UserChats.Count - 1))
                <i class="right bi bi-caret-left-fill"></i>
            </p>
        }
    </a>
    <ul class="nav nav-treeview">
        @if (_isLoading)
        {
            <li class="nav-item text-center">
                <div class="spinner-border text-light my-2" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            </li>
        }
        else if (_errorMessage != null)
        {
            <li class="nav-item">
                <div class="alert alert-danger" role="alert">
                    @_errorMessage
                </div>
            </li>
        }
        else
        {
            @foreach (var (_, v) in UserChats)
            {
                var contact = v.Item1;
                var messages = v.Item2;
                var unreadMessagesCount = messages.Where(e => !e.Read).ToList().Count;
                if (contact.Username != CurrentUser.Username)
                {
                    var navItemClass = CurrentContact?.ClientId == contact.ClientId ? "nav-item bg-light rounded" : "";
                    var nameTextClass = CurrentContact?.ClientId == contact.ClientId ? "nav-item text-dark" : "";
                    <li class="nav-item @navItemClass">
                        <div class="user-panel mt-1 pb-1 mb-1 d-flex align-items-center"
                        @onclick="() => SetUserContactCallback.InvokeAsync(contact.Username)">
                            <div class="image">
                                <img src="@contact.Avatar" class="img-circle elevation-2" alt="User Image">
                            </div>
                            <div class="info">
                                <a href="#" class="d-block @nameTextClass">@contact.Name</a>
                                @if (contact.IsOnline)
                                {
                                    <span class="badge badge-success">Online</span>
                                }
                                else
                                {
                                    <span class="badge badge-secondary">Offline</span>
                                }
                            </div>
                            @if (unreadMessagesCount > 0)
                            {
                                <span class="badge badge-danger align-self-center ml-auto mr-1">
                                    @messages.Where(e =>!e.Read).ToList().Count
                                </span>
                            }

                        </div>
                    </li>
                }
            }
        }

    </ul>
</li>
@code {
    [CascadingParameter]
    public UserDto CurrentUser { get; set; } = new();

    [Parameter]
    public ContactDto? CurrentContact { get; set; } = new();

    [Parameter]
    public EventCallback<string> SetUserContactCallback { get; set; }

    [Parameter]
    public EventCallback<(string, UserDto)> AddUserContactCallback { get; set; }

    [Parameter]
    public Dictionary<string, (UserDto, List<UserMessageDto>)> UserChats { get; set; } = new();

    private bool _isLoading = true;
    private string? _errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _isLoading = true;
            var userContacts = await HttpService.GetAllUserContacts();
            foreach (var userContact in userContacts)
            {
                await AddUserContactCallback.InvokeAsync((userContact.Username, userContact));
            }
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
            throw;
        }
        finally
        {
            _isLoading = false;
        }
    }
}

