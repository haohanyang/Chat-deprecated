@using Chat.WebClient.Services;
@using Chat.Common.DTOs;
@inject IHttpService HttpService;

<div class="modal fade" id="modal-join-group">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Join group</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" placeholder="Group ID" aria-label="Group id"
                            aria-describedby="button-addon2" @bind-value="@_input">
                        <div class="input-group-append">
                            <button class="btn btn-primary" type="button" @onclick="SearchGroup" disabled="@_isSearching"><i
                                    class="bi bi-search"></i></button>
                        </div>
                    </div>
                </form>
                <div class="group-search-result">
                    @if (_isSearching)
                    {
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    }
                    @if (_group != null)
                    {
                        <div class="user-panel d-flex align-items-center">
                            <div class="image">
                                <img src="@_group.Avatar" class="img-circle elevation-2" alt="User Image">
                            </div>
                            <div class="info d-flex flex-column">
                                <span>@_group.Name</span>
                                <small class="text-muted">@_group.Members.Count members</small>
                            </div>
                            <button type="button" class="btn btn-sm btn-success ml-auto" disabled="@(_isRequesting || _isSuccessfull)"  @onclick="JoinGroup">Join</button>

                        </div>
                    }
                    @if (_groupNotFound)
                    {
                        <div class="alert alert-secondary" role="alert">
                            Group not found
                        </div>
                    }

                    @if (_isSuccessfull)
                    {
                        <div class="alert alert-success" role="alert">
                            You have joined the group
                        </div>
                    }

                    @if (_errorMessage != null)
                    {
                        <div class="alert alert-danger" role="alert">
                            @_errorMessage
                        </div>
                    }
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public EventCallback<(int, GroupDto)> AddGroupContactCallback { get; set; }


    [Parameter]
    public EventCallback<int> SetGroupContactCallback { get; set; }

    [CascadingParameter]
    public UserDto CurrentUser { get; set; } = new();
    private string _input = string.Empty;
    private string? _errorMessage = null;
    private GroupDto? _group = null;
    private bool _isSearching = false;
    private bool _isRequesting = false;
    private bool _groupNotFound = false;
    private bool _isSuccessfull = false;

    private async Task SearchGroup()
    {
        _isSearching = true;
        _group = null;
        _errorMessage = null;
        _groupNotFound = false;
        _isSuccessfull = false;

        try
        {
            var id = int.Parse(_input);
            var group = await HttpService.GetGroup(id);
            if (group == null)
            {
                _groupNotFound = true;
            }
            _group = group;
            _isSearching = true;
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
        finally
        {
            _isSearching = false;
        }
    }

    public async Task JoinGroup()
    {

        _isRequesting = true;
        try
        {
            var id = int.Parse(_input);
            var membership = await HttpService.JoinGroup(CurrentUser.Username, _group!.Id);
            var group = membership.Group;

            await AddGroupContactCallback.InvokeAsync((group.Id, group));
            await SetGroupContactCallback.InvokeAsync(group.Id);
            _isSuccessfull = true;
        }
        catch (Exception e)
        {
            _errorMessage = e.Message;
        }
        finally
        {
            _isRequesting = false;
        }
    }

}