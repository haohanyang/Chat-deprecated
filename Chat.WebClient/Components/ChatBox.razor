@using Chat.WebClient.Services;
@using Chat.Common.DTOs;
@inject IJSRuntime JS;
@inject IHttpService HttpService;



@if (_loading)
{
    <ul class="border rounded p-2 chat-message-box bg-white d-flex justify-content-center align-items-center">
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</ul>
}
else
{
    <ul class="border rounded p-2 chat-message-box bg-white">
    @if (_error != null)
        {
            <div class="alert alert-danger" role="alert">
                @_error
            </div>
        }
        else
        {
            @foreach (var message in Chats)
            {
                <Message Message_=@message />
            }
        }
    </ul>

    <div class="text-muted d-flex justify-content-between align-items-center message-input">
        <img src=@CurrentUser.AvatarUrl alt="avatar" class="input-avatar rounded-circle" width="45">
        <div class="form-outline container input-group">
            @{
                var sendButtonClass = "btn p-2 send-btn" + (_sending || _loading ? "disabled" : "");
            }
            <input type="text" class="form-control" id="message-input" @bind=@_input>
            <button class="btn p-2" type="file"><i class="bi bi-paperclip"></i></button>
            <button class="btn p-2 emoji-button"><i class="bi bi-emoji-smile"></i></button>
            <button class=@sendButtonClass @onclick=@SendMessage><i class="bi bi-send"></i></button>
        </div>
    </div>
}






@code {
    [Parameter]
    public BaseDTO CurrentContact { get; set; } = new();

    private BaseDTO _currentContact = new();

    [Parameter]
    public List<MessageDTO> Chats { get; set; } = new();

    [Parameter]
    public EventCallback<(string, UserMessageDTO)> AddUserMessage { get; set; }

    [Parameter]
    public EventCallback<(int, GroupMessageDTO)> AddGroupMessage { get; set; }


    [Parameter]
    public EventCallback<(string, List<UserMessageDTO>)> SetUserMessages { get; set; }


    [Parameter]
    public EventCallback<(int, List<GroupMessageDTO>)> SetGroupMessages { get; set; }

    [CascadingParameter]
    public UserDTO CurrentUser { get; set; } = new();

    private bool _loading = false;
    private bool _sending = false;
    private string? _error;
    private string _input = string.Empty;

    private void SetError(string error)
    {
        _error = error;
        _loading = false;
    }
    @*
protected override async Task OnAfterRenderAsync(bool firstRender)
{
if (_loading == false || _error == null)
{
await JS.InvokeVoidAsync("AddEmojiPopover", ".emoji-button");
}
} *@


    protected override async Task OnParametersSetAsync()
    {
        // If the current contact is changed, fetch new messages
        if (CurrentContact.ClientId != _currentContact.ClientId)
        {
            _loading = true;
            try
            {
                if (CurrentContact is UserDTO userDto)
                {
                    var messages = await HttpService.GetUserChat(CurrentUser.Username, userDto.Username);
                    await SetUserMessages.InvokeAsync((userDto.Username, messages));
                }
                else if (CurrentContact is GroupDTO groupDto)
                {
                    var messages = await HttpService.GetGroupChat(groupDto.Id);
                    await SetGroupMessages.InvokeAsync((groupDto.Id, messages));
                }
            }
            catch (Exception e)
            {
                _error = e.Message;
            }
            finally
            {
                _loading = false;
                _currentContact = CurrentContact;
            }
        }

    }

    private async Task SendMessage()
    {
        if (_input == string.Empty)
        {
            Console.WriteLine("Input is null");
            return;
        }

        try
        {
            _sending = true;
            if (_currentContact is UserDTO userDto)
            {
                var message = new UserMessageDTO
                    {
                        Content = _input,
                        Sender = CurrentUser,
                        Receiver = userDto,
                        Time = DateTime.Now
                    };
                await HttpService.SendUserMessage(message);
                await AddUserMessage.InvokeAsync((userDto.Username, message));
                await JS.InvokeVoidAsync("ScrollDownToChatBottom");
            }
            else if (_currentContact is GroupDTO groupDto)
            {
                var message = new GroupMessageDTO
                    {
                        Content = _input,
                        Sender = CurrentUser,
                        Receiver = groupDto,
                        Time = DateTime.Now
                    };
                await HttpService.SendGroupMessage(message);
                // await AddGroupMessage.InvokeAsync((groupDto.Id, message));
                await JS.InvokeVoidAsync("ScrollDownToChatBottom");
            }
        }
        catch (Exception e)
        {
            _error = e.Message;
        }
        finally
        {
            _sending = false;
            _input = string.Empty;
        }
    }
}