@using Chat.WebClient.Utils
@using Chat.Common.DTOs
@inject IJSRuntime JS

<div class="col-md-6 col-lg-7 col-xl-8 chat-right">
    <ContactStatus CurrentContact=@CurrentContact />
    <div class="border rounded p-2 chat-message-box">
        @if (_loading)
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            @if (_error != null)
            {
                <div class="alert alert-danger" role="alert">
                    @_error
                </div>
            }
            else if (Messages == null)
            {
                <div class="alert alert-danger" role="alert">
                    Message is null
                </div>
            }
            else
            {
                <MessageList Messages=@Messages />
            }
        }
    </div>

    <div class="text-muted d-flex justify-content-between align-items-center pe-3 pt-3 mt-2">

        <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava6-bg.webp" alt="avatar 3"
            style="width: 40px; height: 100%;">

        <div class="form-outline ml-2 flex-fill">
            <input type="text" class="form-control form-control" id="message-input" @bind="_input">
        </div>
        <div>
            <button class="ms-1 text-muted btn m-0 p-0 file-button" href="#!"><i class="bi bi-paperclip"></i></button>
            <button class="ms-3 text-muted btn m-0 p-0 emoji-button" href="#!"><i
                    class="bi bi-emoji-smile"></i></button>

            @if (_sending)
            {
                <button class="ms-3 btn m-0 p-0 disabled send-btn" @onclick=@SendMessage><i class="bi bi-send"></i></button>
            }
            else
            {
                <button class="ms-3 btn m-0 p-0 send-button" @onclick=@SendMessage><i class="bi bi-send"></i></button>
            }
        </div>
    </div>

</div>

@code {
    [Parameter]
    public UserDTO CurrentContact { get; set; } = new();

    private UserDTO _currentUser = new();

    [Parameter]
    public List<MessageDTO>? Messages { get; set; }

    [Parameter]
    public EventCallback<MessageDTO> OnSendMessage { get; set; }


    [Parameter]
    public EventCallback<List<MessageDTO>> OnFetchMessage { get; set; }

    [CascadingParameter]
    public UserDTO CurrentUser { get; set; } = new();

    private bool _loading = false;
    private bool _sending = false;
    private string? _error;
    private string _input = string.Empty;

    private void SetError(string error)
    {
        _error = error;
        _loading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
     // Add popover
    await JS.InvokeVoidAsync("AddEmojiPopover", ".emoji-button");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        // Fetch messages from the server
        try
        {
            var messages = await Fetcher.GetMessages(CurrentContact.Username);
            await OnFetchMessage.InvokeAsync(messages);
        }
        catch (Exception e)
        {
            _error = e.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // If the current contact is changed, fetch new messages
        if (CurrentContact.Username != _currentUser.Username)
        {
            _loading = true;
            try
            {
                var messages = await Fetcher.GetMessages(CurrentContact.Username);
                await OnFetchMessage.InvokeAsync(messages);
            }
            catch (Exception e)
            {
                _error = e.Message;
                await OnFetchMessage.InvokeAsync(null);
            }
            finally
            {
                _loading = false;
                _currentUser = CurrentContact;
            }
        }

    }

    private async Task SendMessage()
    {
        if (_input == null)
        {
            Console.WriteLine("Input is null");
            return;
        }
        var message = new MessageDTO
            {
                Content = _input,
                Sender = CurrentUser.Username,
                Receiver = CurrentContact.Username,
                Time = DateTime.Now
            };
        try
        {
            _sending = true;
            await Fetcher.SendMessage(CurrentContact.Username, message);
            await OnSendMessage.InvokeAsync(message);
        }
        catch (Exception e)
        {
            _error = e.Message;
        }
        finally
        {
            _sending = false;
            _input = "";
        }
    }
}