@using Chat.WebClient.Utils
@using Chat.Common.DTOs
@inject IJSRuntime JS

<div class="col-md-6 col-lg-7 col-xl-8 chat-right">
    <ContactStatus CurrentContact=@CurrentContact />
    @if (_loading)
    {
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
    else
    {
        <ul class="border rounded p-2 chat-message-box bg-white">
            @if (_error != null)
            {
                <div class="alert alert-danger" role="alert">
                    @_error
                </div>
            }
            else
            {
                var messages = Data[CurrentContact.Username].Item2;
                @foreach (var message in messages)
                {
                    <Message Message_=@message />
                }
            }
        </ul>

    }
    <div>

    </div>
    <div class="text-muted d-flex justify-content-between align-items-center pe-3 pt-3 mt-2">
        <img src=@CurrentUser.AvararUrl alt="avatar" class="input-avatar">

        <div class="form-outline container input-group">
            @{
                var sendButtonClass = "btn p-2 send-btn" + (_sending ? "disabled" : "");
            }
            <input type="text" class="form-control" id="message-input" @bind=@_input>
            <button class="btn p-2" type="file"><i class="bi bi-paperclip"></i></button>
            <button class="btn p-2 emoji-button"><i class="bi bi-emoji-smile"></i></button>
            <button class=@sendButtonClass @onclick=@SendMessage><i class="bi bi-send"></i></button>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public UserDTO CurrentContact { get; set; } = new();

    private UserDTO _currentContact = new();

    [Parameter]
    public Dictionary<string, (UserDTO, List<MessageDTO>)> Data { get; set; } = new();

    [Parameter]
    public EventCallback<(string, MessageDTO)> OnSendMessage { get; set; }


    [Parameter]
    public EventCallback<(string, List<MessageDTO>)> OnFetchMessage { get; set; }

    [CascadingParameter]
    public UserDTO CurrentUser { get; set; } = new();

    private bool _loading = false;
    private bool _sending = false;
    private string? _error;
    private string _input = string.Empty;

    private void SetError(string error)
    {
        _error = error;
        _loading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Add popover
            await JS.InvokeVoidAsync("AddEmojiPopover", ".emoji-button");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        // Fetch messages from the server
        try
        {
            var messages = await Fetcher.GetChat(CurrentContact.Username);
            await OnFetchMessage.InvokeAsync((CurrentContact.Username, messages));
        }
        catch (Exception e)
        {
            _error = e.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        // If the current contact is changed, fetch new messages
        if (CurrentContact.Username != _currentContact.Username)
        {
            _loading = true;
            try
            {
                var messages = await Fetcher.GetChat(CurrentContact.Username);
                await OnFetchMessage.InvokeAsync((CurrentContact.Username, messages));
            }
            catch (Exception e)
            {
                _error = e.Message;
            }
            finally
            {
                _loading = false;
                _currentContact = CurrentContact;
            }
        }

    }

    private async Task SendMessage()
    {
        if (_input == null)
        {
            Console.WriteLine("Input is null");
            return;
        }
        var message = new MessageDTO
            {
                Content = _input,
                Sender = CurrentUser,
                Receiver = CurrentContact,
                Time = DateTime.Now
            };
        try
        {
            _sending = true;
            await Fetcher.SendMessage(CurrentContact.Username, message);
            await OnSendMessage.InvokeAsync((CurrentContact.Username, message));
            await JS.InvokeVoidAsync("ScrollDownToChatBottom");
        }
        catch (Exception e)
        {
            _error = e.Message;
        }
        finally
        {
            _sending = false;
            _input = string.Empty;
        }
    }
}