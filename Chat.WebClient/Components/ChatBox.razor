@using Chat.WebClient.Services;
@using Chat.Common.DTOs;
@inject IHttpService HttpService;
@inject IJSRuntime JS;
<div class="content p-0">
    <div class="container-fluid p-0">
        <div class="card card-danger direct-chat card-outline border-top-0">
            <div class="card-header">
                @if (@CurrentContact is UserDTO user)
                {
                    <h3 class="card-title text-bold">@CurrentContact.Name</h3>
                    <span class="text-muted ml-1">@@ @user.Username</span>
                    @if (user.IsOnline)
                    {
                        <span class="badge badge-success ml-1">Online</span>
                    }
                    else
                    {
                        <span class="badge bg-secondary ml-1">Offline</span>
                    }
                }
                else if (CurrentContact is GroupDTO group_)
                {
                    <h3 class="card-title text-bold">@group_.Name</h3>
                    <span class="text-muted ml-1">
                    @group_.Members.Count members
                </span>
                    <div class="card-tools">
                    <button type="button" class="btn btn-tool" data-toggle="tooltip" title="Contacts"
                        data-widget="chat-pane-toggle">
                        <i class="bi bi-people-fill"></i>
                    </button>
                </div>
                }
            </div>
            <!-- /.card-header -->
            <div class="card-body chat-body">
                @if (_loading)
                {
                    <div class="text-center mt-3">
                        <div class="spinner-border" role="status">
                        </div>
                    </div>
                }
                else if (_error != null)
                {
                    <div class="alert alert-danger" role="alert">
                        @_error
                    </div>
                }
                else
                {
                    <div class="direct-chat-messages">
                        @foreach (var message in Chats)
                        {
                            @if (message.Sender.Id != CurrentUser.Id)
                            {
                                <div class="direct-chat-msg px-2">
                                    <img class="direct-chat-img" src="@message.Sender.AvatarUrl" alt="avatar">
                                    <div class="direct-chat-text">
                                        <span class="text-bold">@message.Sender.Name</span>
                                        <p class="mb-0">@message.Content</p>
                                        <span class="float-right text-muted mt-2">@message.Time.ToString("dd MMMM H:mm")</span>
                                    </div>
                                </div>
                            }
                            else
                            {
                                <div class="direct-chat-msg right">
                                    <img class="direct-chat-img" src="@message.Sender.AvatarUrl" alt="avatar">
                                    <div class="direct-chat-text bg-primary border-0">
                                        <p class="text-right text-bold mb-0">@message.Sender.Name</p>
                                        <p class="text-right mb-0">@message.Content</p>
                                        <span class="float-left text-muted mt-2">@message.Time.ToString("dd MMMM H:mm")</span>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                }

                <!-- Group members -->
                @if (CurrentContact is GroupDTO _group)
                {
                    <div class="direct-chat-contacts">
                        <ul class="contacts-list">
                            @foreach (var member in _group.Members)
                            {
                                <li>
                                    <a href="#">
                                        <img class="contacts-list-img" src="@member.AvatarUrl">
                                        <div class="contacts-list-info">
                                            <span class="contacts-list-name">
                                                @member.Name
                                                <small class="contacts-list-date float-right">2/28/2015</small>
                                            </span>
                                            @if (member.IsOnline)
                                            {
                                                <span class="badge badge-success">Online</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">Offline</span>
                                            }
                                        </div>
                                    </a>
                                </li>
                            }

                        </ul>
                    </div>
                }
            </div>
            <!-- Input box -->

            <div class="card-footer">
                <form action="#" method="post">
                    <div class="input-group">
                        <input type="text" name="message" placeholder="Type Message ..." class="form-control"
                        @bind="@_input">
                        <span class="input-group-append">
                            @{
                                var sendButtonClass = "btn btn-primary" + (_sending || _loading ?
                                "disabled" : "");
                            }
                            <input type="submit" class="form-control @sendButtonClass" @onclick:preventDefault="true"
                            @onclick="@SendMessage" value="Send" />
                        </span>
                    </div>
                </form>
            </div>

        </div>
    </div>
</div>

@code {
    [Parameter]
    public BaseDTO CurrentContact { get; set; } = new();

    private BaseDTO _currentContact = new();

    [Parameter]
    public List<MessageDTO> Chats { get; set; } = new();

    [Parameter]
    public EventCallback<(string, UserMessageDTO)> AddUserMessage { get; set; }

    [Parameter]
    public EventCallback<(int, GroupMessageDTO)> AddGroupMessage { get; set; }


    [Parameter]
    public EventCallback<(string, List<UserMessageDTO>)> SetUserMessages { get; set; }


    [Parameter]
    public EventCallback<(int, List<GroupMessageDTO>)> SetGroupMessages { get; set; }

    [CascadingParameter]
    public UserDTO CurrentUser { get; set; } = new();

    private bool _loading = false;
    private bool _sending = false;
    private string? _error;
    private string _input = string.Empty;

    private void SetError(string error)
    {
        _error = error;
        _loading = false;
    }


    protected override async Task OnParametersSetAsync()
    {
        // If the current contact is changed, fetch new messages
        if (CurrentContact.ClientId != _currentContact.ClientId)
        {
            _loading = true;
            try
            {
                if (CurrentContact is UserDTO userDto)
                {
                    var messages = await HttpService.GetUserChat(CurrentUser.Username, userDto.Username);
                    await SetUserMessages.InvokeAsync((userDto.Username, messages));
                }
                else if (CurrentContact is GroupDTO groupDto)
                {
                    var messages = await HttpService.GetGroupChat(groupDto.Id);
                    await SetGroupMessages.InvokeAsync((groupDto.Id, messages));
                }
            }
            catch (Exception e)
            {
                _error = e.Message;
            }
            finally
            {
                _loading = false;
                _currentContact = CurrentContact;
            }
        }

    }

    private async Task SendMessage()
    {
        if (_input == string.Empty)
        {
            Console.WriteLine("Empty message");
            return;
        }

        try
        {
            _sending = true;
            if (_currentContact is UserDTO userDto)
            {
                var message = new UserMessageDTO
                    {
                        Content = _input,
                        Sender = CurrentUser,
                        Receiver = userDto,
                        Time = DateTime.Now
                    };
                await HttpService.SendUserMessage(message);
                await AddUserMessage.InvokeAsync((userDto.Username, message));
                await JS.InvokeVoidAsync("ScrollDownToChatBottom");
            }
            else if (_currentContact is GroupDTO groupDto)
            {
                var message = new GroupMessageDTO
                    {
                        Content = _input,
                        Sender = CurrentUser,
                        Receiver = groupDto,
                        Time = DateTime.Now
                    };
                await HttpService.SendGroupMessage(message);
                await AddGroupMessage.InvokeAsync((groupDto.Id, message));
                await JS.InvokeVoidAsync("ScrollDownToChatBottom");
            }
        }
        catch (Exception e)
        {
            _error = e.Message;
        }
        finally
        {
            _sending = false;
            _input = string.Empty;
        }
    }
}