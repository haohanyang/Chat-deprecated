@using Chat.Common.DTOs;
@using Chat.WebClient.Services;
@using Chat.WebClient.Components;
@using Microsoft.AspNetCore.SignalR.Client;
@inject IHttpService HttpService;

<div class="row">
    @if (_loading)
    {
        <div class="spinner-border" role="status">
        </div>
    }
    else
    {
        @if (_error == null)
        {
            <div class="col-md-12">
                <div class="card chat-card bg-light">
                    <div class="card-body">
                        <div class="row">
                            <CascadingValue Value="_currentUser">
                                @* Left *@
                                <ContactList UserChats="_userChats" GroupChats="_groupChats" AddUserContactCallback="AddUserContact"
                                    AddGroupContactCallback="AddGroupContact" SetUserContactCallback="SetUserContact"
                                    SetGroupContactCallback="SetGroupContact">
                                </ContactList>
                                 @* Right *@
                                 <div class="col-md-6 col-lg-7 col-xl-8 chat-right">
                                     <ContactStatus CurrentContact=@_currentContact />
                                      @if (_currentContact is UserDTO contact)
                                    {
                                        var (_, chats) = _userChats[contact.Username];
                                        <ChatBox Chats="chats.Cast<MessageDTO>().ToList()" CurrentContact="_currentContact"
                                            AddGroupMessage="AddGroupMessage" AddUserMessage="AddUserMessage"
                                            SetGroupMessages="SetGroupMessages" SetUserMessages="SetUserMessages">
                                        </ChatBox>
                                    }
                                    else if (_currentContact is GroupDTO groupDto)
                                    {
                                        var (_, chats) = _groupChats[groupDto.Id];
                                        <ChatBox Chats="chats.Cast<MessageDTO>().ToList()" CurrentContact="_currentContact"
                                            AddGroupMessage="AddGroupMessage" AddUserMessage="AddUserMessage"
                                            SetGroupMessages="SetGroupMessages" SetUserMessages="SetUserMessages">
                                        </ChatBox>
                                    }

                                 </div>
                                    <CreateGroupModal>
                                    </CreateGroupModal>
                                    <JoinGroupModal>
                                    </JoinGroupModal>
                            </CascadingValue>
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-danger" role="alert">
                @_error
            </div>
        }
    }
</div>

@code {
    private HubConnection? _hubConnection;
    private string? _error;
    private bool _loading = false;
    private Dictionary<string, (UserDTO, List<UserMessageDTO>)> _userChats = new();
    private Dictionary<int, (GroupDTO, List<GroupMessageDTO>)> _groupChats = new();

    private UserDTO? _currentUser;
    private BaseDTO? _currentContact;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        try
        {
            // Get the current user
            _currentUser = await HttpService.GetCurrentUser();
            // Connect to the SignalR hub
            _hubConnection = new HubConnectionBuilder()
            .WithUrl(HttpService.GetServerUrl() + "/chat_hub", options =>
            {
                var token = HttpService.GetAccessToken();
                if (token != null)
                {
                    options.Headers.Add("Authorization", "Bearer " + token);
                }
            }).Build();

            _hubConnection.On<UserMessageDTO>("ReceiveUserMessage", message =>
            {
                AddUserMessage((message.Sender.Username, message));
                this.StateHasChanged();
            });

            _hubConnection.On<GroupMessageDTO>("ReceiveGroupMessage", message =>
            {
                AddGroupMessage((message.Receiver.Id, message));
                this.StateHasChanged();
            });

            await _hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            _error = e.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private void SetGroupContact(int groupId)
    {
        _currentContact = _groupChats[groupId].Item1;
    }

    private void SetUserContact(string username)
    {
        _currentContact = _userChats[username].Item1;
    }

    private void AddUserContact((string, UserDTO) args)
    {
        var (username, user) = args;
        _userChats.Add(username, (user, new List<UserMessageDTO>()));
    }

    private void AddGroupContact((int, GroupDTO) args)
    {
        var (groupId, group) = args;
        _groupChats.Add(groupId, (group, new List<GroupMessageDTO>()));
    }

    private void SetUserMessages((string, List<UserMessageDTO>) args)
    {
        var (username, messages) = args;
        if (_userChats.ContainsKey(username))
        {
            var contact = _userChats[username].Item1;
            _userChats[username] = (contact, messages);
        }
        else
        {
            Console.Error.WriteLine($"Failed to set user message: User {username} was not found");
        }
    }

    private void SetGroupMessages((int, List<GroupMessageDTO>) args)
    {
        var (groupId, messages) = args;
        if (_groupChats.ContainsKey(groupId))
        {
            var contact = _groupChats[groupId].Item1;
            _groupChats[groupId] = (contact, messages);
        }
        else
        {
            Console.Error.WriteLine($"Failed to set group message: Group id {groupId} was not found");
        }
    }

    private void AddUserMessage((string, UserMessageDTO) args)
    {
        var (username, message) = args;
        if (_userChats.ContainsKey(username))
        {
            _userChats[username].Item2.Add(message);
        }
        else
        {
            Console.Error.WriteLine($"AddMessage failed. User {username} was not found");
        }
    }

    private void AddGroupMessage((int, GroupMessageDTO) args)
    {
        var (groupId, message) = args;
        if (_groupChats.ContainsKey(groupId))
        {
            _groupChats[groupId].Item2.Add(message);
        }
        else
        {
            Console.Error.WriteLine($"AddMessage failed. Group id {groupId} was not found");
        }
    }

    private void SetError(string? error)
    {
        if (error == null)
        {
            _error = "Unknown error";
        }
        _error = error;
        _loading = false;
    }
}