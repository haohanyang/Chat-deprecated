@using Chat.WebClient.Components;
@using Chat.WebClient.Utils;
@using Chat.Common.DTOs;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Collections.Generic;

<div class="row">
    @if (_loading)
    {
        <div class="spinner-border" role="status">
        </div>
    }
    else
    {
        @if (_error == null)
        {
            <div class="col-md-12">
                <div class="card chat-card bg-light">
                    <div class="card-body">
                        <div class="row">
                            <ContactList Data=@_data OnClickContactCallback=@SetCurrentContact />
                            @if (_currentContact != null)
                            {
                                <CascadingValue Value=@_currentUser>
                                    <ChatBox CurrentContact=@_currentContact OnFetchMessage=@SetMessages
                                        OnSendMessage=@AddMessage Data=@_data/>
                                </CascadingValue>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-danger" role="alert">
                @_error
            </div>
        }
    }
</div>

@code {
    private HubConnection? _hubConnection;
    private string? _userInput;
    private string? _error;
    private bool _loading = false;
    private Dictionary<string, (UserDTO, List<MessageDTO>)> _data = new Dictionary<string, (UserDTO, List<MessageDTO>)>();
    
    private UserDTO? _currentUser;
    private UserDTO? _currentContact { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        try
        {
            // Get the current user
            _currentUser = await Fetcher.GetCurrentUser();
            // Connect to the SignalR hub
            _hubConnection = new HubConnectionBuilder()
            .WithUrl(Fetcher.ServerUrl + "/chat_hub", options => {
                var token = Fetcher.GetAccessToken();
                if (token != null) {
                    options.Headers.Add("Authorization", "Bearer " + token);
                }
            }).Build();

            _hubConnection.On<MessageDTO>("ReceiveMessage", message =>
            {
                Console.WriteLine("ReceiveMessage");
                AddMessage((message.Sender.Username, message));
                this.StateHasChanged();
            });

            await _hubConnection.StartAsync();

            // Get all contacts
            var contacts = (await Fetcher.GetAllContacts())
            .Where(contact => contact.Username != _currentUser.Username);

            Console.WriteLine("Contacts: " + contacts.Count());

            foreach(var contact in contacts)
            {
                _data.Add(contact.Username, (new UserDTO {
                    Username = contact.Username,
                    Name = contact.Name,
                    AvararUrl = contact.AvararUrl
                }, new List<MessageDTO>()));
            }

        }
        catch (Exception e)
        {
            _error = e.Message;
        }
        finally
        {
            _loading = false;
        }

    }

    private void SetCurrentContact(string contactUsername)
    {
        _currentContact = _data[contactUsername].Item1;
    }

    private void SetMessages((string, List<MessageDTO>) args)
    {
        var (contactUsername, messages) = args;
        if (_data.ContainsKey(contactUsername))
        {
            var contact = _data[contactUsername].Item1;
            _data[contactUsername] = (contact, messages);
        } else {
            Console.Error.WriteLine("SetMessages: Contact " + contactUsername + " not found");
        }
    }

    private void AddMessage((string, MessageDTO) args)
    {
        var (contactUsername, message) = args;
        if (_data.ContainsKey(contactUsername)) {
            _data[contactUsername].Item2.Add(message);
        } else {
            Console.Error.WriteLine("AddMessage: Contact not found");
        }
    }

    private void SetError(string? error)
    {
        if (error == null)
        {
            _error = "Unknown error";
        }
        _error = error;
        _loading = false;
    }
}