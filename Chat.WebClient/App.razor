@using Chat.WebClient.Components;
@using Chat.WebClient.Utils;
@using Chat.Common.DTOs;
@using Microsoft.AspNetCore.SignalR.Client;
@using System.Collections.Generic;

<div class="row">
    @if (_loading)
    {
        <div class="spinner-border" role="status">
        </div>
    }
    else
    {
        @if (_error == null)
        {
            <div class="col-md-12">
                <div class="card" id="chat3" style="border-radius: 15px;">
                    <div class="card-body">
                        <div class="row pt-2">
                            <ContactList Contacts=@_contacts OnClickContactCallback=@SetCurrentContact />
                            @if (_currentContact != null)
                            {
                                <CascadingValue Value=@_currentUser>
                                    <ChatBox CurrentContact=@_currentContact OnFetchMessage=@SetMessages
                                        OnSendMessage=@AddMessage Messages=@_messages/>
                                </CascadingValue>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-danger" role="alert">
                @_error
            </div>
        }
    }
</div>

@code {
    private HubConnection? _hubConnection;
    private string? _userInput;
    private string? _error;
    private bool _loading = false;
    private IEnumerable<UserDTO>? _contacts;
    private List<MessageDTO>? _messages;
    private UserDTO? _currentUser;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        try
        {
            /// Get the current user
            _currentUser = await Fetcher.GetCurrentUser();

            // Connect to the SignalR hub
            _hubConnection = new HubConnectionBuilder()
            .WithUrl(Fetcher.ServerUrl + "/chat_hub").Build();

            _hubConnection.On<MessageDTO>("ReceiveMessage", message =>
            {
                Console.WriteLine("ReceiveMessage");
                AddMessage(message);
                this.StateHasChanged();
            });

            await _hubConnection.StartAsync();

            // Get all contacts
            var contacts = await Fetcher.GetAllContacts();
            _contacts = contacts.Where(c => c.Username != _currentUser.Username);

        }
        catch (Exception e)
        {
            _error = e.Message;

        }
        finally
        {
            _loading = false;
        }

    }
    private UserDTO? _currentContact { get; set; }

    private void SetCurrentContact(UserDTO contact)
    {
        _currentContact = contact;
    }

    private void SetMessages(List<MessageDTO> messages)
    {
        Console.WriteLine("SetMessages");
        _messages = messages;
    }

    private void AddMessage(MessageDTO message)
    {
        _messages?.Add(message);
    }

    private void SetError(string? error)
    {
        if (error == null)
        {
            _error = "Unknown error";
        }
        _error = error;
        _loading = false;
    }
}