@using Chat.Common.DTOs;
@using Chat.WebClient.Services;
@using Chat.WebClient.Components;
@using Microsoft.AspNetCore.SignalR.Client;
@inject IHttpService HttpService;
@inject IJSRuntime JS

@using Chat.Common.Dtos

<div class="wrapper">
    @if (_loading)
    {
        <div class="container vh-100 d-flex justify-content-center align-items-center">
            <div class="spinner-grow" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else
    {
        @if (_error == null)
        {
            <CascadingValue Value="_currentUser">
                <NavBar />
                <SideBar CurrentContact="_currentContact" UserChats="_userChats" GroupChats="_groupChats"
                    AddUserContactCallback="AddUserContact" AddGroupContactCallback="AddGroupContact"
                    SetUserContactCallback="SetUserContact" SetGroupContactCallback="SetGroupContact" />

                <div class="content-wrapper">
                    @if (_currentContact is UserDto contact)
                    {
                        var (_, chats) = _userChats[contact.Username];
                        <ChatBox Chats="chats.Cast<MessageDto>().ToList()" CurrentContact="_currentContact"
                            AddGroupMessage="AddGroupMessage" AddUserMessage="AddUserMessage" SetGroupMessages="SetGroupMessages"
                            SetUserMessages="SetUserMessages">
                        </ChatBox>
                    }
                    else if (_currentContact is GroupDto groupDto)
                    {
                        var (_, chats) = _groupChats[groupDto.Id];
                        <ChatBox Chats="chats.Cast<MessageDto>().ToList()" CurrentContact="_currentContact"
                            AddGroupMessage="AddGroupMessage" AddUserMessage="AddUserMessage" SetGroupMessages="SetGroupMessages"
                            SetUserMessages="SetUserMessages">
                        </ChatBox>
                    }
                </div>

                <CreateGroupModal AddGroupContactCallback="AddGroupContact" SetGroupContactCallback="SetGroupContact" />
                <JoinGroupModal AddGroupContactCallback="AddGroupContact" SetGroupContactCallback="SetGroupContact" />
            </CascadingValue>
        }
        else
        {
            <div class="alert alert-danger" role="alert">
                @_error
            </div>
        }
    }
</div>

@code {
    private HubConnection? _hubConnection;
    private string? _error;
    private bool _loading = false;
    private Dictionary<string, (UserDto, List<UserMessageDto>)> _userChats = new();
    private Dictionary<int, (GroupDto, List<GroupMessageDto>)> _groupChats = new();

    private UserDto? _currentUser;
    private ContactDto? _currentContact;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        try
        {
            // Get the current user
            _currentUser = await HttpService.GetCurrentUser();
            // Connect to the SignalR hub
            _hubConnection = new HubConnectionBuilder()
            .WithUrl(HttpService.GetServerUrl() + "/chat_hub", options =>
            {
                var token = HttpService.GetAccessToken();
                if (token != null)
                {
                    options.Headers.Add("Authorization", "Bearer " + token);
                }
            }).Build();

            _hubConnection.On<UserMessageDto>("ReceiveUserMessage", message =>
            {
                AddUserMessage((message.Sender.Username, message));
                this.StateHasChanged();
            });

            _hubConnection.On<GroupMessageDto>("ReceiveGroupMessage", message =>
            {
                AddGroupMessage((message.Receiver.Id, message));
                this.StateHasChanged();
            });

            await _hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            _error = e.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private void SetGroupContact(int groupId)
    {
        _currentContact = _groupChats[groupId].Item1;
    }

    private void SetUserContact(string username)
    {
        _currentContact = _userChats[username].Item1;
    }

    private void AddUserContact((string, UserDto) args)
    {
        var (username, user) = args;
        _userChats.Add(username, (user, new List<UserMessageDto>()));
    }

    private void AddGroupContact((int, GroupDto) args)
    {
        var (groupId, group) = args;
        _groupChats.Add(groupId, (group, new List<GroupMessageDto>()));
    }

    private void SetUserMessages((string, List<UserMessageDto>) args)
    {
        var (username, messages) = args;
        if (_userChats.ContainsKey(username))
        {
            var contact = _userChats[username].Item1;
            _userChats[username] = (contact, messages);
        }
        else
        {
            Console.Error.WriteLine($"Failed to set user message: User {username} was not found");
        }
    }

    private void SetGroupMessages((int, List<GroupMessageDto>) args)
    {
        var (groupId, messages) = args;
        if (_groupChats.ContainsKey(groupId))
        {
            var contact = _groupChats[groupId].Item1;
            _groupChats[groupId] = (contact, messages);
        }
        else
        {
            Console.Error.WriteLine($"Failed to set group message: Group id {groupId} was not found");
        }
    }

    private void AddUserMessage((string, UserMessageDto) args)
    {
        var (username, message) = args;
        if (_userChats.ContainsKey(username))
        {
            _userChats[username].Item2.Add(message);
        }
        else
        {
            Console.Error.WriteLine($"AddMessage failed. User {username} was not found");
        }
    }

    private void AddGroupMessage((int, GroupMessageDto) args)
    {
        var (groupId, message) = args;
        if (_groupChats.ContainsKey(groupId))
        {
            _groupChats[groupId].Item2.Add(message);
        }
        else
        {
            Console.Error.WriteLine($"AddMessage failed. Group id {groupId} was not found");
        }
    }


    private void SetError(string? error)
    {
        if (error == null)
        {
            _error = "Unknown error";
        }
        _error = error;
        _loading = false;
    }

}